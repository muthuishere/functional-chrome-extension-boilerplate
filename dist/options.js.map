{"version":3,"file":"options.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension-boilerplate/./src/options/usecases/changeDefaultColor.js","webpack://chrome-extension-boilerplate/./src/options/usecases/optionPageBuilder.js","webpack://chrome-extension-boilerplate/./src/services/dom.service.js","webpack://chrome-extension-boilerplate/./src/services/storage.service.js","webpack://chrome-extension-boilerplate/webpack/bootstrap","webpack://chrome-extension-boilerplate/webpack/runtime/define property getters","webpack://chrome-extension-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension-boilerplate/webpack/runtime/make namespace object","webpack://chrome-extension-boilerplate/./src/options/index.js"],"sourcesContent":["import {storageApi} from \"../../services/storage.service\";\r\nimport {addClassTo, getDataAttribute, querySelectorOnParent, removeClassFrom} from \"../../services/dom.service\";\r\nimport {selectedClassName} from \"./optionPageBuilder\";\r\n\r\n\r\nexport function onColorChange(selectedButton) {\r\n\r\n    let classSelector = \".\" + selectedClassName;\r\n    const previousSelectedButton = querySelectorOnParent(selectedButton, classSelector);\r\n\r\n\r\n    if (previousSelectedButton && previousSelectedButton !== selectedButton) {\r\n        removeClassFrom(previousSelectedButton, selectedClassName);\r\n    }\r\n\r\n\r\n    let color = getDataAttribute(selectedButton,\"color\") ;\r\n    addClassTo(selectedButton, selectedClassName);\r\n\r\n    storageApi.set({ color });\r\n\r\n}\r\n","import {storageApi} from \"../../services/storage.service\";\r\n\r\nexport const presetButtonColors = [\"#3aa757\", \"#e8453c\", \"#f9bb2d\", \"#4688f1\"];\r\nexport const selectedClassName = \"current\";\r\n\r\nexport async function getAvailableColorButtons() {\r\n    const {color }  = await storageApi.get(\"color\")\r\n\r\n    return  presetButtonColors\r\n        .map(buttonColor => ({color:buttonColor,className:buttonColor===color?selectedClassName:\"\"}))\r\n}\r\n","export  const setBackgroundColorOfDocument = (color)=>document.body.style.backgroundColor = color;\r\n\r\nexport const querySelectorOnParent = (element, selector) =>  element.parentElement.querySelector(\r\n    `${selector}`\r\n);\r\n\r\nexport const removeClassFrom = (element, className) => element.classList.remove(className);\r\nexport const addClassTo = (element, className) => {\r\n    if(!!className && element.classList.contains(className) === false)\r\n        element.classList.add(className);\r\n}\r\n\r\nexport const getDataAttribute = (element, attributeName) => {\r\n  return   element.getAttribute(`data-${attributeName}`);\r\n}\r\n","\r\nexport const storageApi = {\r\n\r\n    set:(obj)=>chrome.storage.sync.set(obj),\r\n    get:async (key)=>{\r\n\r\n        return new Promise((resolve,reject)=>{\r\n\r\n            chrome.storage.sync.get(key, (data) => {\r\n                console.log(\"retrieved data\",data)\r\n                resolve(data)\r\n            });\r\n        })\r\n    }\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {getAvailableColorButtons} from \"./usecases/optionPageBuilder\";\r\nimport {onColorChange} from \"./usecases/changeDefaultColor\";\r\nimport {addClassTo} from \"../services/dom.service\";\r\n\r\n\r\n// Reacts to a button click by marking the selected button and saving\r\n// the selection\r\nfunction handleButtonClick(event) {\r\n\r\n    onColorChange(event.target);\r\n}\r\n\r\nfunction createButton({color, className}) {\r\n    console.log(color);\r\n    console.log(className);\r\n    let button = document.createElement(\"button\");\r\n    button.dataset.color = color;\r\n    button.style.backgroundColor = color;\r\n    addClassTo(button, className);\r\n    button.addEventListener(\"click\", handleButtonClick);\r\n    return button;\r\n}\r\n// Add a button to the page for each supplied color\r\nasync function constructOptions() {\r\n\r\n    let page = document.getElementById(\"buttonDiv\");\r\n    const buttons = await getAvailableColorButtons();\r\n\r\n    console.log(buttons);\r\n    buttons.map(createButton).forEach(button => page.appendChild(button));\r\n\r\n}\r\n\r\n// Initialize the page by constructing the color options\r\nconstructOptions().then(r => console.log(r));\r\n"],"names":[],"sourceRoot":""}