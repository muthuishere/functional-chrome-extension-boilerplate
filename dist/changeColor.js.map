{"version":3,"file":"changeColor.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension-boilerplate/./src/services/contentscript.service.js","webpack://chrome-extension-boilerplate/./src/services/dom.service.js","webpack://chrome-extension-boilerplate/./src/services/injector.service.js","webpack://chrome-extension-boilerplate/webpack/bootstrap","webpack://chrome-extension-boilerplate/webpack/runtime/define property getters","webpack://chrome-extension-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension-boilerplate/webpack/runtime/make namespace object","webpack://chrome-extension-boilerplate/./src/contentscripts/usecases/changeColor.js"],"sourcesContent":["\r\n\r\nexport const sendMessage = (message) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        chrome.runtime.sendMessage(message, (response) => {\r\n\r\n            console.log('received user data', response);\r\n            resolve(response);\r\n        });\r\n\r\n    })\r\n\r\n}\r\n\r\n","export  const setBackgroundColorOfDocument = (color)=>document.body.style.backgroundColor = color;\r\n\r\nexport const querySelectorOnParent = (element, selector) =>  element.parentElement.querySelector(\r\n    `${selector}`\r\n);\r\n\r\nexport const removeClassFrom = (element, className) => element.classList.remove(className);\r\nexport const addClassTo = (element, className) => {\r\n    if(!!className && element.classList.contains(className) === false)\r\n        element.classList.add(className);\r\n}\r\n\r\nexport const getDataAttribute = (element, attributeName) => {\r\n  return   element.getAttribute(`data-${attributeName}`);\r\n}\r\n","export const initContentScriptWith = (fn, ... args) =>{\r\n    if(typeof chrome !== \"undefined\") {\r\n        fn(args)\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {setBackgroundColorOfDocument} from \"../../services/dom.service\";\r\nimport {sendMessage} from \"../../services/contentscript.service\";\r\nimport {initContentScriptWith} from \"../../services/injector.service\";\r\n\r\nfunction getColorFromBackgroundPage() {\r\n    return sendMessage({type: \"getColor\"});\r\n}\r\n\r\nexport async function  setPageColor()  {\r\n\r\n    const {color} = await getColorFromBackgroundPage()\r\n\r\n    console.log(\"setting color to\",color)\r\n    setBackgroundColorOfDocument(color)\r\n\r\n}\r\n\r\n// The following is to start content script after injection\r\ninitContentScriptWith(setPageColor);\r\n"],"names":[],"sourceRoot":""}